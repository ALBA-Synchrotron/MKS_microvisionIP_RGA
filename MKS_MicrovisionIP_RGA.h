/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGA.h) ENABLED START -----*/
//=============================================================================
//
// file :        MKS_MicrovisionIP_RGA.h
//
// description : Include file for the MKS_MicrovisionIP_RGA class
//
// project :     MKS Microvision IP RGA
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MKS_MicrovisionIP_RGA_H
#define MKS_MicrovisionIP_RGA_H

#include <tango.h>
#include <iostream>


#define MaxMass 100
// Maximum acquisition time for one value
// Maximum time to wait between 2 massreading before to switch the state to fault and the status to "not scanning"
#define MAX_ACQUISITION_TIME	15	// in seconds
#define LINK_DOWN_OK		1
#define LINK_DOWN_SERIAL	-1
#define LINK_DOWN_VSC		-2
#define BARCHART	0
#define LEAKCHECK	1
#define ANALOG		2

#define	DB_RETRIES	3
#define	DB_TIMEOUT	13000


/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGA.h

/**
 *  MKS_MicrovisionIP_RGA class description:
 *    This device server will control MKS Microvision IP Residual Gas Analyser.
 */

namespace MKS_MicrovisionIP_RGA_ns
{
/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGA::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGA::Additional Class Declarations

class MKS_MicrovisionIP_RGA : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGA::Data Members) ENABLED START -----*/

//	Add your own data members
public:
	//Extract real attribute values from hardware acquisition result.
	virtual void read_Mass(Tango::Attribute &attr);
	
	void start();
	double get_ticks();
	
	bool killthread;
	bool threadisconnected;   // true if the thread is correctly connected to the RGA
	string SerialNumber;
	string sensorstate;	// Sensor state : "Unknown","InUse","Ready","Config" or "N/A"
	vector<Tango::DevDouble> Masses;
	Tango::DevDouble ** attr_Mass_read;
	string RGA_Answer;
	Tango::DevString send_cmd(const char * );
	bool scanstarted;
	string ActiveFilament;
	string FilamentStatus;
	string FilamentState;
	string MultiplierState;
	bool RFTripped;
	short linkdown;
	struct timeval last_measure_time;
	unsigned int mode;  // BARCHART, LEAKCHECK or ANALOG
	string FilamentTripReason;
	
	omni_mutex 	*command_mutex;
	omni_condition	*command_cond;
	

/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGA::Data Members

//	Device property data members
public:
	//	Socket_device:	Name of the Socket device.
	string	socket_device;
	//	Timeout:	Maximum time in ms to wait before getting the response of a command.
	Tango::DevLong	timeout;
	//	Accuracy:	Scanning accuracy at startup.
	Tango::DevUShort	accuracy;
	//	FilamentNumber:	Filament number at startup.
	Tango::DevUShort	filamentNumber;
	//	DetectorIndex:	Detector Index at startup.
	Tango::DevUShort	detectorIndex;
	//	StartMass:	Start Mass used at startup for barchart and analog measurement modes.
	Tango::DevUShort	startMass;
	//	EndMass:	EndMass used at startup in barchart and analog measurement modes.
	Tango::DevUShort	endMass;
	//	LeakCheckMass:	Mass scanned in Single Peak measurement mode (LeakCheck mode).
	Tango::DevDouble	leakCheckMass;
	//	Gain:	Electronic gain Index used at startup.
	Tango::DevUShort	gain;
	//	MeasurementMode:	Measurement Mode used at startup.
	//  Possible values are :
	//  - LeakCheck (SinglePeak)
	//  - Barchart
	//  - Analog
	string	measurementMode;
	//	Time_until_reinit:	Time to wait (in seconds) before reinitialization of the server when no more
	//  data come from the RGA and release command was not used.
	Tango::DevLong	time_until_reinit;
	//	SourceIndex:	Index of the source settings to use for measurement.
	//  The MicroVision IP supports up to 6 sets of ion source
	//  parameters which can be configured to suit the hardware
	//  configuration and environment where the sensor is used.
	Tango::DevUShort	sourceIndex;
	//	FilterMode:	Specifies how each AMU should be scanned and turned into a single reading:
	//  - PeakCenter:    Single point at the nominal peak center is measured
	//  - PeakMax:       Central 1/2 AMU scanned and the max value reported
	//  - PeakAverage: Central 1/2 AMIU scanned and the average value reported
	string	filterMode;
	//	Min_detectable_pressure:	Minimum detectable pressure.
	//  If the pressure measured is under that value,
	//  the server will return a pressure equal to this min_detectable_pressure value.
	Tango::DevDouble	min_detectable_pressure;
	//	Degas_start_power:	Percentage power to start at when degassing
	Tango::DevShort	degas_start_power;
	//	Degas_end_power:	Percentage power to ramp to when degassing
	Tango::DevShort	degas_end_power;
	//	Degas_ramp_period:	Time in seconds to ramp between degas_start_power and degas_end_power when degassing
	Tango::DevShort	degas_ramp_period;
	//	Degas_max_power_period:	Time to hold at EndPower when degassing
	Tango::DevShort	degas_max_power_period;
	//	Degas_resettle_period:	Time to return to default settings
	Tango::DevShort	degas_resettle_period;
	//	StaticPressures:	
	vector<Tango::DevDouble>	staticPressures;

//	Attribute data members
public:
	Tango::DevString	*attr_MeasurementMode_read;
	Tango::DevUShort	*attr_Accuracy_read;
	Tango::DevUShort	*attr_FilamentNumber_read;
	Tango::DevUShort	*attr_DetectorIndex_read;
	Tango::DevDouble	*attr_DetectorVoltage_read;
	Tango::DevUShort	*attr_StartMass_read;
	Tango::DevUShort	*attr_EndMass_read;
	Tango::DevDouble	*attr_LeakCheckMass_read;
	Tango::DevLong	*attr_Timeout_read;
	Tango::DevUShort	*attr_Gain_read;
	Tango::DevUShort	*attr_SourceIndex_read;
	Tango::DevString	*attr_FilterMode_read;
	Tango::DevDouble	*attr_LeakCheckPressure_read;
	Tango::DevString	*attr_DegasStatus_read;
	Tango::DevBoolean	*attr_FilamentDegas_read;
	Tango::DevDouble	*attr_LifetimePressure_read;
	Tango::DevDouble	*attr_Masses_read;
	Tango::DevDouble	*attr_MassesHistory_read;
	Tango::DevDouble	*attr_StaticPressures_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MKS_MicrovisionIP_RGA(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MKS_MicrovisionIP_RGA(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	MKS_MicrovisionIP_RGA(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~MKS_MicrovisionIP_RGA() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : MKS_MicrovisionIP_RGA::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : MKS_MicrovisionIP_RGA::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute MeasurementMode related methods
 *	Description: Possible values :\n- Barchart\n- LeakCheck\n- Analog
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_MeasurementMode(Tango::Attribute &attr);
	virtual void write_MeasurementMode(Tango::WAttribute &attr);
	virtual bool is_MeasurementMode_allowed(Tango::AttReqType type);
/**
 *	Attribute Accuracy related methods
 *	Description: Measurement accuracy\npossible values : 0 to 8 (best accuracy, minimum speed).
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Accuracy(Tango::Attribute &attr);
	virtual void write_Accuracy(Tango::WAttribute &attr);
	virtual bool is_Accuracy_allowed(Tango::AttReqType type);
/**
 *	Attribute FilamentNumber related methods
 *	Description: Number of the active filament.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_FilamentNumber(Tango::Attribute &attr);
	virtual void write_FilamentNumber(Tango::WAttribute &attr);
	virtual bool is_FilamentNumber_allowed(Tango::AttReqType type);
/**
 *	Attribute DetectorIndex related methods
 *	Description: Detector (Multiplier) Index.\npossible values : from 0 to 3.\nChanges the selected measurements detector index. Faraday is detector 0 and if the sensor has a multiplier then\nindexes 1,2 and 3 provide alternate settings for the multiplier voltage.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_DetectorIndex(Tango::Attribute &attr);
	virtual void write_DetectorIndex(Tango::WAttribute &attr);
	virtual bool is_DetectorIndex_allowed(Tango::AttReqType type);
/**
 *	Attribute DetectorVoltage related methods
 *	Description: Detector Voltage.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_DetectorVoltage(Tango::Attribute &attr);
	virtual void write_DetectorVoltage(Tango::WAttribute &attr);
	virtual bool is_DetectorVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute StartMass related methods
 *	Description: Start Mass for Barchart scans.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_StartMass(Tango::Attribute &attr);
	virtual void write_StartMass(Tango::WAttribute &attr);
	virtual bool is_StartMass_allowed(Tango::AttReqType type);
/**
 *	Attribute EndMass related methods
 *	Description: End Mass for Barchart scans.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_EndMass(Tango::Attribute &attr);
	virtual void write_EndMass(Tango::WAttribute &attr);
	virtual bool is_EndMass_allowed(Tango::AttReqType type);
/**
 *	Attribute LeakCheckMass related methods
 *	Description: Mass scanned in Leakcheck mode.\n(SinglePeak scans).
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_LeakCheckMass(Tango::Attribute &attr);
	virtual void write_LeakCheckMass(Tango::WAttribute &attr);
	virtual bool is_LeakCheckMass_allowed(Tango::AttReqType type);
/**
 *	Attribute Timeout related methods
 *	Description: Maximum time in ms to wait before getting the response of a command.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Timeout(Tango::Attribute &attr);
	virtual void write_Timeout(Tango::WAttribute &attr);
	virtual bool is_Timeout_allowed(Tango::AttReqType type);
/**
 *	Attribute Gain related methods
 *	Description: Electronic gain Index to use for the measurements.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Gain(Tango::Attribute &attr);
	virtual void write_Gain(Tango::WAttribute &attr);
	virtual bool is_Gain_allowed(Tango::AttReqType type);
/**
 *	Attribute SourceIndex related methods
 *	Description: Index of the source settings to use for measurement.\nThe MicroVision IP supports up to 6 sets of ion source \nparameters which can be configured to suit the hardware \nconfiguration and environment where the sensor is used.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_SourceIndex(Tango::Attribute &attr);
	virtual void write_SourceIndex(Tango::WAttribute &attr);
	virtual bool is_SourceIndex_allowed(Tango::AttReqType type);
/**
 *	Attribute FilterMode related methods
 *	Description: Specifies how each AMU should be scanned and turned into a single reading:\n- PeakCenter:    Single point at the nominal peak center is measured\n- PeakMax:       Central 1/2 AMU scanned and the max value reported\n- PeakAverage: Central 1/2 AMIU scanned and the average value reported
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_FilterMode(Tango::Attribute &attr);
	virtual void write_FilterMode(Tango::WAttribute &attr);
	virtual bool is_FilterMode_allowed(Tango::AttReqType type);
/**
 *	Attribute LeakCheckPressure related methods
 *	Description: This is the pressure of the mass defined by the LeakCheckMass attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_LeakCheckPressure(Tango::Attribute &attr);
	virtual bool is_LeakCheckPressure_allowed(Tango::AttReqType type);
/**
 *	Attribute DegasStatus related methods
 *	Description: Status of the degassing process
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_DegasStatus(Tango::Attribute &attr);
	virtual bool is_DegasStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute FilamentDegas related methods
 *	Description: When this attribute is set to true, it will start the degassing process on the \ncurrent selected filament.\nThe attribute will stay true until the filament degassing process will end.\nWhen this attribute is set to false, it will call the StopDegas command.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_FilamentDegas(Tango::Attribute &attr);
	virtual void write_FilamentDegas(Tango::WAttribute &attr);
	virtual bool is_FilamentDegas_allowed(Tango::AttReqType type);
/**
 *	Attribute LifetimePressure related methods
 *	Description: Apparent pressure contributing to the lifetime.\nThis is the weighted sum of partial pressures * Z^2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_LifetimePressure(Tango::Attribute &attr);
	virtual bool is_LifetimePressure_allowed(Tango::AttReqType type);
/**
 *	Attribute Masses related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 101
 */
	virtual void read_Masses(Tango::Attribute &attr);
	virtual bool is_Masses_allowed(Tango::AttReqType type);
/**
 *	Attribute MassesHistory related methods
 *	Description: This attribute is the same as the Masses attribute and was \ncreated to be able to have another polling period and a buffer history.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 101
 */
	virtual void read_MassesHistory(Tango::Attribute &attr);
	virtual bool is_MassesHistory_allowed(Tango::AttReqType type);
/**
 *	Attribute StaticPressures related methods
 *	Description: spectrum of pressure taken when beam is at 0.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 101
 */
	virtual void read_StaticPressures(Tango::Attribute &attr);
	virtual bool is_StaticPressures_allowed(Tango::AttReqType type);

//	Dynamic attribute methods
public:

	/**
	 *	Attribute MassScalarAttrib related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar
	 */
	virtual void read_MassScalarAttrib(Tango::Attribute &attr);
	virtual bool is_MassScalarAttrib_allowed(Tango::AttReqType type);
	void add_MassScalarAttrib_dynamic_attribute(string attname);
	void remove_MassScalarAttrib_dynamic_attribute(string attname);
	Tango::DevDouble *get_MassScalarAttrib_data_ptr(string &name);
	map<string,Tango::DevDouble>	   MassScalarAttrib_data;

	//--------------------------------------------------------
	/**
	 *	Method      : MKS_MicrovisionIP_RGA::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command On related method
	 *	Description: Switch On the selected filament.
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: Switch Off the selected filament.
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Reset the faults.
	 *               If you want to initialise the unit in the predefined state and parameters, please use Init command.
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command SendCmd related method
	 *	Description: This command will send the command given in parameter to the RGA and return the anwer
	 *               from the RGA as it.
	 *
	 *	@param argin Command to send to RGA
	 *	@returns Response from RGA
	 */
	virtual Tango::DevString send_cmd(Tango::DevString argin);
	virtual bool is_SendCmd_allowed(const CORBA::Any &any);
	/**
	 *	Command Release related method
	 *	Description: Release the control of the RGA.
	 *               Use this command only if you want to use another program than the Tango Device server to control the RGA.
	 *
	 */
	virtual void release();
	virtual bool is_Release_allowed(const CORBA::Any &any);
	/**
	 *	Command StartDegas related method
	 *	Description: Start the filament degassing process
	 *
	 */
	virtual void start_degas();
	virtual bool is_StartDegas_allowed(const CORBA::Any &any);
	/**
	 *	Command StopDegas related method
	 *	Description: Stop the filament degassing process.
	 *
	 */
	virtual void stop_degas();
	virtual bool is_StopDegas_allowed(const CORBA::Any &any);
	/**
	 *	Command StoreStaticPress related method
	 *	Description: store the static pressure. this is autorized only if the SR current is 0.
	 *
	 */
	virtual void store_static_press();
	virtual bool is_StoreStaticPress_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : MKS_MicrovisionIP_RGA::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGA::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
	friend class RGAThread;
	
	omni_mutex	mutex;
	omni_thread	*rga_thread;
	
	Tango::DeviceProxy * Socketds;
	Tango::DevVarDoubleArray attr_Masses;
	Tango::DevVarDoubleArray attr_StaticPressures;
	Tango::MultiAttribute 	* attr_list;
	Tango::Util 		* tg;
	string thestatus;
	string degas_status;
	bool released;
	bool controlled;
	bool addbarchartOK;
	bool barchartadded;
	bool addsinglepeakOK;
	bool detectorinfoOK;
	bool singlepeakadded;
	double DetectorVoltages[4];
	bool check_ACK(string &, const char *, unsigned long, unsigned long);
	bool	manual_reset_needed;
	unsigned long timeout_secs;
	unsigned long timeout_nanosecs;
	bool properties_initialized;
	double LifetimePressure;

/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGA::Additional Method prototypes
};

/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGA::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGA::Additional Classes Definitions

}	//	End of namespace

#endif   //	MKS_MicrovisionIP_RGA_H

/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGAClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        MKS_MicrovisionIP_RGAClass.h
//
// description : Include for the MKS_MicrovisionIP_RGA root class.
//               This class is the singleton class for
//                the MKS_MicrovisionIP_RGA device class.
//               It contains all properties and methods which the 
//               MKS_MicrovisionIP_RGA requires only once e.g. the commands.
//
// project :     MKS Microvision IP RGA
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MKS_MicrovisionIP_RGAClass_H
#define MKS_MicrovisionIP_RGAClass_H

#include <tango.h>
#include <MKS_MicrovisionIP_RGA.h>

/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGAClass.h


namespace MKS_MicrovisionIP_RGA_ns
{
/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGAClass::classes for dynamic creation) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGAClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute MeasurementMode class definition
class MeasurementModeAttrib: public Tango::Attr
{
public:
	MeasurementModeAttrib():Attr("MeasurementMode",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~MeasurementModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_MeasurementMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_MeasurementMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_MeasurementMode_allowed(ty);}
};

//	Attribute Accuracy class definition
class AccuracyAttrib: public Tango::Attr
{
public:
	AccuracyAttrib():Attr("Accuracy",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~AccuracyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_Accuracy(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_Accuracy(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_Accuracy_allowed(ty);}
};

//	Attribute FilamentNumber class definition
class FilamentNumberAttrib: public Tango::Attr
{
public:
	FilamentNumberAttrib():Attr("FilamentNumber",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~FilamentNumberAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_FilamentNumber(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_FilamentNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_FilamentNumber_allowed(ty);}
};

//	Attribute DetectorIndex class definition
class DetectorIndexAttrib: public Tango::Attr
{
public:
	DetectorIndexAttrib():Attr("DetectorIndex",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~DetectorIndexAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_DetectorIndex(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_DetectorIndex(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_DetectorIndex_allowed(ty);}
};

//	Attribute DetectorVoltage class definition
class DetectorVoltageAttrib: public Tango::Attr
{
public:
	DetectorVoltageAttrib():Attr("DetectorVoltage",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~DetectorVoltageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_DetectorVoltage(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_DetectorVoltage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_DetectorVoltage_allowed(ty);}
};

//	Attribute StartMass class definition
class StartMassAttrib: public Tango::Attr
{
public:
	StartMassAttrib():Attr("StartMass",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~StartMassAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_StartMass(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_StartMass(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_StartMass_allowed(ty);}
};

//	Attribute EndMass class definition
class EndMassAttrib: public Tango::Attr
{
public:
	EndMassAttrib():Attr("EndMass",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~EndMassAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_EndMass(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_EndMass(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_EndMass_allowed(ty);}
};

//	Attribute LeakCheckMass class definition
class LeakCheckMassAttrib: public Tango::Attr
{
public:
	LeakCheckMassAttrib():Attr("LeakCheckMass",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LeakCheckMassAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_LeakCheckMass(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_LeakCheckMass(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_LeakCheckMass_allowed(ty);}
};

//	Attribute Timeout class definition
class TimeoutAttrib: public Tango::Attr
{
public:
	TimeoutAttrib():Attr("Timeout",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~TimeoutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_Timeout(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_Timeout(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_Timeout_allowed(ty);}
};

//	Attribute Gain class definition
class GainAttrib: public Tango::Attr
{
public:
	GainAttrib():Attr("Gain",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~GainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_Gain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_Gain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_Gain_allowed(ty);}
};

//	Attribute SourceIndex class definition
class SourceIndexAttrib: public Tango::Attr
{
public:
	SourceIndexAttrib():Attr("SourceIndex",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~SourceIndexAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_SourceIndex(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_SourceIndex(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_SourceIndex_allowed(ty);}
};

//	Attribute FilterMode class definition
class FilterModeAttrib: public Tango::Attr
{
public:
	FilterModeAttrib():Attr("FilterMode",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~FilterModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_FilterMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_FilterMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_FilterMode_allowed(ty);}
};

//	Attribute LeakCheckPressure class definition
class LeakCheckPressureAttrib: public Tango::Attr
{
public:
	LeakCheckPressureAttrib():Attr("LeakCheckPressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~LeakCheckPressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_LeakCheckPressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_LeakCheckPressure_allowed(ty);}
};

//	Attribute DegasStatus class definition
class DegasStatusAttrib: public Tango::Attr
{
public:
	DegasStatusAttrib():Attr("DegasStatus",
			Tango::DEV_STRING, Tango::READ) {};
	~DegasStatusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_DegasStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_DegasStatus_allowed(ty);}
};

//	Attribute FilamentDegas class definition
class FilamentDegasAttrib: public Tango::Attr
{
public:
	FilamentDegasAttrib():Attr("FilamentDegas",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~FilamentDegasAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_FilamentDegas(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->write_FilamentDegas(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_FilamentDegas_allowed(ty);}
};

//	Attribute LifetimePressure class definition
class LifetimePressureAttrib: public Tango::Attr
{
public:
	LifetimePressureAttrib():Attr("LifetimePressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~LifetimePressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_LifetimePressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_LifetimePressure_allowed(ty);}
};

//	Attribute Masses class definition
class MassesAttrib: public Tango::SpectrumAttr
{
public:
	MassesAttrib():SpectrumAttr("Masses",
			Tango::DEV_DOUBLE, Tango::READ, 101) {};
	~MassesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_Masses(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_Masses_allowed(ty);}
};

//	Attribute MassesHistory class definition
class MassesHistoryAttrib: public Tango::SpectrumAttr
{
public:
	MassesHistoryAttrib():SpectrumAttr("MassesHistory",
			Tango::DEV_DOUBLE, Tango::READ, 101) {};
	~MassesHistoryAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_MassesHistory(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_MassesHistory_allowed(ty);}
};

//	Attribute StaticPressures class definition
class StaticPressuresAttrib: public Tango::SpectrumAttr
{
public:
	StaticPressuresAttrib():SpectrumAttr("StaticPressures",
			Tango::DEV_DOUBLE, Tango::READ, 101) {};
	~StaticPressuresAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_StaticPressures(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_StaticPressures_allowed(ty);}
};


//=========================================
//	Define classes for dynamic attributes
//=========================================
//	Attribute MassScalarAttrib class definition
class MassScalarAttribAttrib: public Tango::Attr
{
public:
	MassScalarAttribAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_DOUBLE, Tango::READ) {};
	~MassScalarAttribAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MKS_MicrovisionIP_RGA *>(dev))->read_MassScalarAttrib(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_MassScalarAttrib_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command On class definition
class OnClass : public Tango::Command
{
public:
	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_On_allowed(any);}
};

//	Command Off class definition
class OffClass : public Tango::Command
{
public:
	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_Off_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_Reset_allowed(any);}
};

//	Command SendCmd class definition
class SendCmdClass : public Tango::Command
{
public:
	SendCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SendCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SendCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_SendCmd_allowed(any);}
};

//	Command Release class definition
class ReleaseClass : public Tango::Command
{
public:
	ReleaseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReleaseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReleaseClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_Release_allowed(any);}
};

//	Command StartDegas class definition
class StartDegasClass : public Tango::Command
{
public:
	StartDegasClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartDegasClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartDegasClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_StartDegas_allowed(any);}
};

//	Command StopDegas class definition
class StopDegasClass : public Tango::Command
{
public:
	StopDegasClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopDegasClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopDegasClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_StopDegas_allowed(any);}
};

//	Command StoreStaticPress class definition
class StoreStaticPressClass : public Tango::Command
{
public:
	StoreStaticPressClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StoreStaticPressClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StoreStaticPressClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MKS_MicrovisionIP_RGA *>(dev))->is_StoreStaticPress_allowed(any);}
};


/**
 *	The MKS_MicrovisionIP_RGAClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  MKS_MicrovisionIP_RGAClass : public Tango::DeviceClass
#else
class MKS_MicrovisionIP_RGAClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(MKS_MicrovisionIP_RGAClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	MKS_MicrovisionIP_RGAClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static MKS_MicrovisionIP_RGAClass *init(const char *);
		static MKS_MicrovisionIP_RGAClass *instance();
		~MKS_MicrovisionIP_RGAClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		MKS_MicrovisionIP_RGAClass(string &);
		static MKS_MicrovisionIP_RGAClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	MKS_MicrovisionIP_RGA_H
